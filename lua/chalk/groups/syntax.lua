-- Basic syntax highlight groups for chalk.nvim
local M = {}

function M.setup(colors, config)
	local c = colors

	local highlights = {
		-- Comments
		Comment = { fg = c.comment, italic = config.styles.comments and config.styles.comments.italic },

		-- Constants
		Constant = {
			fg = c.constant,
			italic = config.styles.constants and config.styles.constants.italic,
			bold = config.styles.constants and config.styles.constants.bold,
		},
		String = { fg = c.string, italic = config.styles.strings and config.styles.strings.italic },
		Character = { fg = c.string },
		Number = { fg = c.number, italic = config.styles.numbers and config.styles.numbers.italic },
		Boolean = { fg = c.boolean, italic = config.styles.booleans and config.styles.booleans.italic },
		Float = { fg = c.number },

		-- Identifiers
		Identifier = { fg = c.variable, italic = config.styles.variables and config.styles.variables.italic },
		Function = {
			fg = c.function_name,
			italic = config.styles.functions and config.styles.functions.italic,
			bold = config.styles.functions and config.styles.functions.bold,
		},

		-- Statements
		Statement = {
			fg = c.keyword,
			italic = config.styles.keywords and config.styles.keywords.italic,
			bold = config.styles.keywords and config.styles.keywords.bold,
		},
		Conditional = {
			fg = c.conditional or c.keyword,
			italic = config.styles.conditionals and config.styles.conditionals.italic,
			bold = config.styles.conditionals and config.styles.conditionals.bold,
		},
		Repeat = {
			fg = c.keyword,
			italic = config.styles.loops and config.styles.loops.italic,
			bold = config.styles.loops and config.styles.loops.bold,
		},
		Label = { fg = c.keyword },
		Operator = {
			fg = c.operator,
			italic = config.styles.operators and config.styles.operators.italic,
			bold = config.styles.operators and config.styles.operators.bold,
		},
		Keyword = {
			fg = c.keyword,
			italic = config.styles.keywords and config.styles.keywords.italic,
			bold = config.styles.keywords and config.styles.keywords.bold,
		},
		Exception = { fg = c.keyword },

		-- PreProcessor
		PreProc = { fg = c.preproc or c.keyword },
		Include = { fg = c.include or c.keyword },
		Define = { fg = c.define or c.keyword },
		Macro = { fg = c.macro or c.keyword },
		PreCondit = { fg = c.preproc or c.keyword },

		-- Types
		Type = {
			fg = c.type,
			italic = config.styles.types and config.styles.types.italic,
			bold = config.styles.types and config.styles.types.bold,
		},
		StorageClass = { fg = c.keyword },
		Structure = { fg = c.type },
		Typedef = { fg = c.type },

		-- Special
		Special = { fg = c.special },
		SpecialChar = { fg = c.escape or c.special },
		Tag = { fg = c.keyword },
		Delimiter = { fg = c.punctuation },
		SpecialComment = { fg = c.comment, bold = true },
		Debug = { fg = c.error },

		-- Underlined
		Underlined = { underline = true },

		-- Ignore
		Ignore = { fg = c.bg },

		-- Error
		Error = { fg = c.error, bold = true },

		-- Todo
		Todo = { fg = c.todo or c.warning, bg = c.bg, bold = true },

		-- Language-specific enhancements
		-- Lua
		luaFunction = { fg = c.keyword },
		luaTable = { fg = c.fg },
		luaIn = { fg = c.keyword },
		luaConstant = { fg = c.constant },
		luaCond = { fg = c.conditional or c.keyword },
		luaElse = { fg = c.conditional or c.keyword },
		luaFor = { fg = c.keyword },
		luaString = { fg = c.string },
		luaComment = { fg = c.comment },
		luaDocComment = { fg = c.comment, italic = true },

		-- Python
		pythonBuiltin = { fg = c.function_builtin or c.function_name },
		pythonException = { fg = c.keyword },
		pythonDecoratorName = { fg = c.attribute or c.secondary },
		pythonDecorator = { fg = c.attribute or c.secondary },
		pythonDottedName = { fg = c.function_name },
		pythonDot = { fg = c.punctuation },
		pythonFunction = { fg = c.function_name },
		pythonClass = { fg = c.type },
		pythonClassVar = { fg = c.variable },
		pythonBuiltinObj = { fg = c.function_builtin or c.constant },
		pythonBuiltinFunc = { fg = c.function_builtin or c.function_name },
		pythonString = { fg = c.string },
		pythonRawString = { fg = c.string },
		pythonTripleString = { fg = c.string },
		pythonComment = { fg = c.comment },

		-- JavaScript/TypeScript
		javaScriptFunction = { fg = c.keyword },
		javaScriptIdentifier = { fg = c.keyword },
		javaScriptMember = { fg = c.property or c.variable },
		javaScriptNumber = { fg = c.number },
		javaScriptNull = { fg = c.constant },
		javaScriptUndefined = { fg = c.constant },
		javaScriptStatement = { fg = c.keyword },
		javaScriptOperator = { fg = c.operator },
		javaScriptBoolean = { fg = c.boolean },
		javaScriptRegexpString = { fg = c.regex or c.string },
		javaScriptStringD = { fg = c.string },
		javaScriptStringS = { fg = c.string },
		javaScriptStringT = { fg = c.string },

		-- TypeScript specific
		typescriptImport = { fg = c.include or c.keyword },
		typescriptExport = { fg = c.include or c.keyword },
		typescriptModule = { fg = c.keyword },
		typescriptIdentifier = { fg = c.variable },
		typescriptNull = { fg = c.constant },
		typescriptUndefined = { fg = c.constant },
		typescriptFunction = { fg = c.keyword },
		typescriptArrowFunc = { fg = c.operator },
		typescriptBraces = { fg = c.punctuation },
		typescriptParens = { fg = c.punctuation },
		typescriptOpSymbols = { fg = c.operator },
		typescriptEndColons = { fg = c.punctuation },
		typescriptDotNotation = { fg = c.punctuation },
		typescriptGlobalObjects = { fg = c.type },
		typescriptHtmlElemAttrs = { fg = c.attribute or c.property },
		typescriptHtmlElemName = { fg = c.keyword },

		-- HTML
		htmlTag = { fg = c.punctuation },
		htmlEndTag = { fg = c.punctuation },
		htmlTagName = { fg = c.keyword },
		htmlArg = { fg = c.attribute or c.property },
		htmlSpecialChar = { fg = c.escape or c.special },
		htmlString = { fg = c.string },
		htmlValue = { fg = c.string },
		htmlTitle = { fg = c.fg, bold = true },
		htmlH1 = { fg = c.keyword, bold = true },
		htmlH2 = { fg = c.function_name, bold = true },
		htmlH3 = { fg = c.string, bold = true },
		htmlH4 = { fg = c.constant, bold = true },
		htmlH5 = { fg = c.variable, bold = true },
		htmlH6 = { fg = c.comment, bold = true },
		htmlLink = { fg = c.info, underline = true },

		-- CSS
		cssClassName = { fg = c.type },
		cssClassNameDot = { fg = c.punctuation },
		cssIdentifier = { fg = c.type },
		cssTagName = { fg = c.keyword },
		cssBraces = { fg = c.punctuation },
		cssAttr = { fg = c.property or c.variable },
		cssAttrComma = { fg = c.punctuation },
		cssAttrRegion = { fg = c.property or c.variable },
		cssColor = { fg = c.number },
		cssFunction = { fg = c.function_name },
		cssFunctionName = { fg = c.function_name },
		cssVendor = { fg = c.function_name },
		cssValueNumber = { fg = c.number },
		cssValueLength = { fg = c.number },
		cssUnitDecorators = { fg = c.number },
		cssStyle = { fg = c.property or c.variable },
		cssProp = { fg = c.property or c.variable },
		cssDefinition = { fg = c.fg },

		-- JSON
		jsonKeyword = { fg = c.string },
		jsonString = { fg = c.string },
		jsonNumber = { fg = c.number },
		jsonBoolean = { fg = c.boolean },
		jsonNull = { fg = c.constant },
		jsonBraces = { fg = c.punctuation },
		jsonQuote = { fg = c.punctuation },

		-- YAML
		yamlKey = { fg = c.keyword },
		yamlValue = { fg = c.string },
		yamlAnchor = { fg = c.type },
		yamlAlias = { fg = c.type },
		yamlDocumentHeader = { fg = c.keyword },
		yamlBlockMappingKey = { fg = c.keyword },
		yamlBlockCollectionItemStart = { fg = c.punctuation },
		yamlBlockSequenceStart = { fg = c.punctuation },
		yamlFlowMappingKey = { fg = c.keyword },
		yamlFlowCollection = { fg = c.punctuation },
		yamlComment = { fg = c.comment },

		-- XML
		xmlTag = { fg = c.punctuation },
		xmlEndTag = { fg = c.punctuation },
		xmlTagName = { fg = c.keyword },
		xmlAttrib = { fg = c.attribute or c.property },
		xmlString = { fg = c.string },
		xmlComment = { fg = c.comment },
		xmlCommentPart = { fg = c.comment },
		xmlProcessingDelim = { fg = c.punctuation },

		-- Go
		goDirective = { fg = c.preproc or c.keyword },
		goConstants = { fg = c.constant },
		goDeclaration = { fg = c.keyword },
		goDeclType = { fg = c.keyword },
		goBuiltins = { fg = c.function_builtin or c.function_name },
		goFunctionCall = { fg = c.function_name },
		goVarArgs = { fg = c.variable },
		goVarDefs = { fg = c.variable },
		goReceiver = { fg = c.parameter or c.variable },
		goReceiverType = { fg = c.type },
		goArgumentName = { fg = c.parameter or c.variable },
		goArgumentType = { fg = c.type },
		goPackage = { fg = c.include or c.keyword },
		goImport = { fg = c.include or c.keyword },

		-- Rust
		rustKeyword = { fg = c.keyword },
		rustIdentifier = { fg = c.variable },
		rustFunction = { fg = c.function_name },
		rustFuncCall = { fg = c.function_name },
		rustString = { fg = c.string },
		rustStringDelimiter = { fg = c.string },
		rustCharacter = { fg = c.string },
		rustNumber = { fg = c.number },
		rustBoolean = { fg = c.boolean },
		rustConstant = { fg = c.constant },
		rustSelf = { fg = c.keyword },
		rustSuper = { fg = c.keyword },
		rustStorage = { fg = c.keyword },
		rustStructure = { fg = c.type },
		rustType = { fg = c.type },
		rustTrait = { fg = c.type },
		rustEnum = { fg = c.type },
		rustEnumVariant = { fg = c.constant },
		rustMacro = { fg = c.macro or c.function_name },
		rustAttribute = { fg = c.attribute or c.secondary },
		rustDerive = { fg = c.attribute or c.secondary },
		rustOperator = { fg = c.operator },
		rustArrowCharacter = { fg = c.operator },
		rustLifetime = { fg = c.special },
		rustLabel = { fg = c.special },
		rustExternCrate = { fg = c.include or c.keyword },
		rustObsoleteStorage = { fg = c.error },
		rustObsoleteExternMod = { fg = c.error },
		rustBoxPlacement = { fg = c.operator },
		rustBoxPlacementBalance = { fg = c.operator },

		-- C/C++
		cIncluded = { fg = c.string },
		cInclude = { fg = c.include or c.keyword },
		cPreProc = { fg = c.preproc or c.keyword },
		cPreCondit = { fg = c.preproc or c.keyword },
		cPreConditMatch = { fg = c.preproc or c.keyword },
		cType = { fg = c.type },
		cStorageClass = { fg = c.keyword },
		cStructure = { fg = c.type },
		cOperator = { fg = c.operator },
		cStatement = { fg = c.keyword },
		cTODO = { fg = c.todo or c.warning, bold = true },
		cConstant = { fg = c.constant },
		cSpecial = { fg = c.special },
		cSpecialCharacter = { fg = c.escape or c.special },
		cString = { fg = c.string },
		cCppString = { fg = c.string },
		cCharacter = { fg = c.string },
		cNumber = { fg = c.number },
		cFloat = { fg = c.number },
		cFunction = { fg = c.function_name },
		cLabel = { fg = c.special },
		cConditional = { fg = c.conditional or c.keyword },
		cRepeat = { fg = c.keyword },
		cExceptions = { fg = c.keyword },

		-- Shell/Bash
		shFunction = { fg = c.function_name },
		shStatement = { fg = c.keyword },
		shConditional = { fg = c.conditional or c.keyword },
		shRepeat = { fg = c.keyword },
		shKeyword = { fg = c.keyword },
		shQuote = { fg = c.punctuation },
		shString = { fg = c.string },
		shHereDoc = { fg = c.string },
		shRedir = { fg = c.operator },
		shDerefSimple = { fg = c.variable },
		shDerefVar = { fg = c.variable },
		shDerefSpecial = { fg = c.special },
		shDerefOp = { fg = c.operator },
		shOperator = { fg = c.operator },
		shExpr = { fg = c.operator },
		shRange = { fg = c.operator },
		shArithmetic = { fg = c.operator },
		shCharClass = { fg = c.special },
		shSnglCase = { fg = c.conditional or c.keyword },
		shCaseEsac = { fg = c.conditional or c.keyword },
		shCaseIn = { fg = c.conditional or c.keyword },
		shCaseCommandSub = { fg = c.function_name },
		shCaseExSingleQuote = { fg = c.string },
		shCaseSingleQuote = { fg = c.string },
		shCaseDoubleQuote = { fg = c.string },
		shStringSpecial = { fg = c.escape or c.special },
		shCmdSubRegion = { fg = c.function_name },
		shCmdParenRegion = { fg = c.function_name },
		shTodo = { fg = c.todo or c.warning, bold = true },
		shComment = { fg = c.comment },
		shDo = { fg = c.keyword },
		shFor = { fg = c.keyword },
		shIf = { fg = c.conditional or c.keyword },
		shElse = { fg = c.conditional or c.keyword },
		shElif = { fg = c.conditional or c.keyword },
		shFi = { fg = c.conditional or c.keyword },
		shThen = { fg = c.conditional or c.keyword },
		shWhile = { fg = c.keyword },
		shUntil = { fg = c.keyword },
		shCase = { fg = c.conditional or c.keyword },

		-- Vim script
		vimCommand = { fg = c.keyword },
		vimKeyword = { fg = c.keyword },
		vimVar = { fg = c.variable },
		vimFuncVar = { fg = c.variable },
		vimFunction = { fg = c.function_name },
		vimUserFunc = { fg = c.function_name },
		vimString = { fg = c.string },
		vimRegister = { fg = c.special },
		vimAutoCmd = { fg = c.function_name },
		vimMapModKey = { fg = c.special },
		vimNotation = { fg = c.special },
		vimBrackKey = { fg = c.special },
		vimParenSep = { fg = c.punctuation },
		vimSep = { fg = c.punctuation },
		vimOperParen = { fg = c.punctuation },
		vimComment = { fg = c.comment },
		vimCommentString = { fg = c.comment },
		vimLineComment = { fg = c.comment },
		vimCommentTitle = { fg = c.comment, bold = true },
		vimNumber = { fg = c.number },
		vimBoolean = { fg = c.boolean },
		vimEnvvar = { fg = c.variable },
		vimOption = { fg = c.type },
		vimSetString = { fg = c.string },
		vimSetBool = { fg = c.boolean },
		vimAugroupKey = { fg = c.keyword },
		vimNotFunc = { fg = c.keyword },
		vimHiGroup = { fg = c.type },
		vimGroup = { fg = c.type },
	}

	return highlights
end

return M
